/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "go.aporeto.io/gaia-k8s/pkg/apis/networkprismacloudio/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProcessingUnitLister helps list ProcessingUnits.
// All objects returned here must be treated as read-only.
type ProcessingUnitLister interface {
	// List lists all ProcessingUnits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ProcessingUnit, err error)
	// ProcessingUnits returns an object that can list and get ProcessingUnits.
	ProcessingUnits(namespace string) ProcessingUnitNamespaceLister
	ProcessingUnitListerExpansion
}

// processingUnitLister implements the ProcessingUnitLister interface.
type processingUnitLister struct {
	indexer cache.Indexer
}

// NewProcessingUnitLister returns a new ProcessingUnitLister.
func NewProcessingUnitLister(indexer cache.Indexer) ProcessingUnitLister {
	return &processingUnitLister{indexer: indexer}
}

// List lists all ProcessingUnits in the indexer.
func (s *processingUnitLister) List(selector labels.Selector) (ret []*v1.ProcessingUnit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProcessingUnit))
	})
	return ret, err
}

// ProcessingUnits returns an object that can list and get ProcessingUnits.
func (s *processingUnitLister) ProcessingUnits(namespace string) ProcessingUnitNamespaceLister {
	return processingUnitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProcessingUnitNamespaceLister helps list and get ProcessingUnits.
// All objects returned here must be treated as read-only.
type ProcessingUnitNamespaceLister interface {
	// List lists all ProcessingUnits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ProcessingUnit, err error)
	// Get retrieves the ProcessingUnit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ProcessingUnit, error)
	ProcessingUnitNamespaceListerExpansion
}

// processingUnitNamespaceLister implements the ProcessingUnitNamespaceLister
// interface.
type processingUnitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProcessingUnits in the indexer for a given namespace.
func (s processingUnitNamespaceLister) List(selector labels.Selector) (ret []*v1.ProcessingUnit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProcessingUnit))
	})
	return ret, err
}

// Get retrieves the ProcessingUnit from the indexer for a given namespace and name.
func (s processingUnitNamespaceLister) Get(name string) (*v1.ProcessingUnit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("processingunit"), name)
	}
	return obj.(*v1.ProcessingUnit), nil
}
