/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "go.aporeto.io/gaia-k8s/pkg/apis/networkprismacloudio/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExternalNetworkLister helps list ExternalNetworks.
// All objects returned here must be treated as read-only.
type ExternalNetworkLister interface {
	// List lists all ExternalNetworks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ExternalNetwork, err error)
	// ExternalNetworks returns an object that can list and get ExternalNetworks.
	ExternalNetworks(namespace string) ExternalNetworkNamespaceLister
	ExternalNetworkListerExpansion
}

// externalNetworkLister implements the ExternalNetworkLister interface.
type externalNetworkLister struct {
	indexer cache.Indexer
}

// NewExternalNetworkLister returns a new ExternalNetworkLister.
func NewExternalNetworkLister(indexer cache.Indexer) ExternalNetworkLister {
	return &externalNetworkLister{indexer: indexer}
}

// List lists all ExternalNetworks in the indexer.
func (s *externalNetworkLister) List(selector labels.Selector) (ret []*v1.ExternalNetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalNetwork))
	})
	return ret, err
}

// ExternalNetworks returns an object that can list and get ExternalNetworks.
func (s *externalNetworkLister) ExternalNetworks(namespace string) ExternalNetworkNamespaceLister {
	return externalNetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalNetworkNamespaceLister helps list and get ExternalNetworks.
// All objects returned here must be treated as read-only.
type ExternalNetworkNamespaceLister interface {
	// List lists all ExternalNetworks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ExternalNetwork, err error)
	// Get retrieves the ExternalNetwork from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ExternalNetwork, error)
	ExternalNetworkNamespaceListerExpansion
}

// externalNetworkNamespaceLister implements the ExternalNetworkNamespaceLister
// interface.
type externalNetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalNetworks in the indexer for a given namespace.
func (s externalNetworkNamespaceLister) List(selector labels.Selector) (ret []*v1.ExternalNetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalNetwork))
	})
	return ret, err
}

// Get retrieves the ExternalNetwork from the indexer for a given namespace and name.
func (s externalNetworkNamespaceLister) Get(name string) (*v1.ExternalNetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("externalnetwork"), name)
	}
	return obj.(*v1.ExternalNetwork), nil
}
