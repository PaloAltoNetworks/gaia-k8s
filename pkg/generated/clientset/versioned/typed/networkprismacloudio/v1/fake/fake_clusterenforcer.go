/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	networkprismacloudiov1 "go.aporeto.io/gaia-k8s/pkg/apis/networkprismacloudio/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterEnforcers implements ClusterEnforcerInterface
type FakeClusterEnforcers struct {
	Fake *FakeNetworkV1
}

var clusterenforcersResource = schema.GroupVersionResource{Group: "network.prismacloud.io", Version: "v1", Resource: "clusterenforcers"}

var clusterenforcersKind = schema.GroupVersionKind{Group: "network.prismacloud.io", Version: "v1", Kind: "ClusterEnforcer"}

// Get takes name of the clusterEnforcer, and returns the corresponding clusterEnforcer object, and an error if there is any.
func (c *FakeClusterEnforcers) Get(ctx context.Context, name string, options v1.GetOptions) (result *networkprismacloudiov1.ClusterEnforcer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusterenforcersResource, name), &networkprismacloudiov1.ClusterEnforcer{})
	if obj == nil {
		return nil, err
	}
	return obj.(*networkprismacloudiov1.ClusterEnforcer), err
}

// List takes label and field selectors, and returns the list of ClusterEnforcers that match those selectors.
func (c *FakeClusterEnforcers) List(ctx context.Context, opts v1.ListOptions) (result *networkprismacloudiov1.ClusterEnforcerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusterenforcersResource, clusterenforcersKind, opts), &networkprismacloudiov1.ClusterEnforcerList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &networkprismacloudiov1.ClusterEnforcerList{ListMeta: obj.(*networkprismacloudiov1.ClusterEnforcerList).ListMeta}
	for _, item := range obj.(*networkprismacloudiov1.ClusterEnforcerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterEnforcers.
func (c *FakeClusterEnforcers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clusterenforcersResource, opts))
}
