/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	networkprismacloudiov1 "go.aporeto.io/gaia-k8s/pkg/apis/networkprismacloudio/v1"
	scheme "go.aporeto.io/gaia-k8s/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ProcessingUnitsGetter has a method to return a ProcessingUnitInterface.
// A group's client should implement this interface.
type ProcessingUnitsGetter interface {
	ProcessingUnits(namespace string) ProcessingUnitInterface
}

// ProcessingUnitInterface has methods to work with ProcessingUnit resources.
type ProcessingUnitInterface interface {
	Get(ctx context.Context, name string, opts v1.GetOptions) (*networkprismacloudiov1.ProcessingUnit, error)
	List(ctx context.Context, opts v1.ListOptions) (*networkprismacloudiov1.ProcessingUnitList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	ProcessingUnitExpansion
}

// processingUnits implements ProcessingUnitInterface
type processingUnits struct {
	client rest.Interface
	ns     string
}

// newProcessingUnits returns a ProcessingUnits
func newProcessingUnits(c *NetworkV1Client, namespace string) *processingUnits {
	return &processingUnits{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the processingUnit, and returns the corresponding processingUnit object, and an error if there is any.
func (c *processingUnits) Get(ctx context.Context, name string, options v1.GetOptions) (result *networkprismacloudiov1.ProcessingUnit, err error) {
	result = &networkprismacloudiov1.ProcessingUnit{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("processingunits").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ProcessingUnits that match those selectors.
func (c *processingUnits) List(ctx context.Context, opts v1.ListOptions) (result *networkprismacloudiov1.ProcessingUnitList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &networkprismacloudiov1.ProcessingUnitList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("processingunits").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested processingUnits.
func (c *processingUnits) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("processingunits").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}
