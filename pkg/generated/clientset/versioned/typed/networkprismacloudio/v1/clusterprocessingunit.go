/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	networkprismacloudiov1 "go.aporeto.io/gaia-k8s/pkg/apis/networkprismacloudio/v1"
	scheme "go.aporeto.io/gaia-k8s/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ClusterProcessingUnitsGetter has a method to return a ClusterProcessingUnitInterface.
// A group's client should implement this interface.
type ClusterProcessingUnitsGetter interface {
	ClusterProcessingUnits() ClusterProcessingUnitInterface
}

// ClusterProcessingUnitInterface has methods to work with ClusterProcessingUnit resources.
type ClusterProcessingUnitInterface interface {
	Get(ctx context.Context, name string, opts v1.GetOptions) (*networkprismacloudiov1.ClusterProcessingUnit, error)
	List(ctx context.Context, opts v1.ListOptions) (*networkprismacloudiov1.ClusterProcessingUnitList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	ClusterProcessingUnitExpansion
}

// clusterProcessingUnits implements ClusterProcessingUnitInterface
type clusterProcessingUnits struct {
	client rest.Interface
}

// newClusterProcessingUnits returns a ClusterProcessingUnits
func newClusterProcessingUnits(c *NetworkV1Client) *clusterProcessingUnits {
	return &clusterProcessingUnits{
		client: c.RESTClient(),
	}
}

// Get takes name of the clusterProcessingUnit, and returns the corresponding clusterProcessingUnit object, and an error if there is any.
func (c *clusterProcessingUnits) Get(ctx context.Context, name string, options v1.GetOptions) (result *networkprismacloudiov1.ClusterProcessingUnit, err error) {
	result = &networkprismacloudiov1.ClusterProcessingUnit{}
	err = c.client.Get().
		Resource("clusterprocessingunits").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ClusterProcessingUnits that match those selectors.
func (c *clusterProcessingUnits) List(ctx context.Context, opts v1.ListOptions) (result *networkprismacloudiov1.ClusterProcessingUnitList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &networkprismacloudiov1.ClusterProcessingUnitList{}
	err = c.client.Get().
		Resource("clusterprocessingunits").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested clusterProcessingUnits.
func (c *clusterProcessingUnits) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("clusterprocessingunits").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}
